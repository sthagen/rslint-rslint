name: Rust CI

on:
  pull_request:
  push:
    branches:
      - master

env:
  RUST_LOG: info
  RUST_BACKTRACE: 1


jobs:
  rust:
    name: Rust ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { rust: stable,           os: ubuntu-latest }
          - { rust: stable,           os: macos-latest }
          - { rust: stable,           os: windows-latest }
          - { rust: nightly,          os: ubuntu-latest }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
          components: clippy,rustfmt

      - name: Load Rust Cache
        uses: Swatinem/rust-cache@v1

      - name: Rustfmt
        if: contains(matrix.os, 'ubuntu') && contains(matrix.rust, 'stable')
        run: cargo fmt --all -- --check

      - name: Build
        run: cargo build --verbose --workspace

      - name: Test
        run: cargo test --verbose --workspace

      - name: Clippy
        if: contains(matrix.os, 'ubuntu') && contains(matrix.rust, 'stable')
        env:
          RUSTFLAGS: -Dwarnings
        run: cargo clippy --workspace --all-targets --verbose

      - name: Check documentation
        env:
          RUSTDOCFLAGS: -Dwarnings
        run: cargo doc --workspace --all-features --document-private-items --no-deps

  coverage:
    name: Test262 coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Setup Rust
        uses: hecrj/setup-rust-action@v1

      - name: Load Rust Cache
        uses: Swatinem/rust-cache@v1

      - name: Run Test262 suite
        continue-on-error: true
        run: cargo xtask coverage

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Setup Rust
        uses: hecrj/setup-rust-action@v1

      - name: Load Rust Cache
        uses: Swatinem/rust-cache@v1

      - name: Install Node.js
        uses: actions/setup-node@v2-beta
        with:
          node-version: "14"

      - name: Install Deno
        uses: denolib/setup-deno@master
        with:
          deno-version: v1.10.1

      - name: Install npm packages
        run: npm install --ci
        working-directory: benchmarks

      - name: Build
        run: cargo build --release -p rslint_cli

      - name: Run Benchmarks
        run: deno run -A --quiet benchmarks/bench.ts
